name: Deploy Backend to AWS ECS

on:
  push:
    branches: ["main", "master", "cursor/deploy-backend-to-aws-with-cicd-8521"]
    paths:
      - "server/**"
      - ".github/workflows/deploy-backend.yml"
      - "aws/**"

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  ECR_REPO: app-server
  SERVICE_NAME: app-server
  CLUSTER_NAME: app-cluster
  ECS_TASKDEF_PATH: aws/ecs/taskdef.json

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPO }} >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPO }} >/dev/null

      - name: Build, tag, and push image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f server/Dockerfile -t $ECR_REGISTRY/${{ env.ECR_REPO }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:$IMAGE_TAG

      - name: Render task definition with new image
        id: taskdef
        run: |
          IMAGE_URI="${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}"
          jq --arg IMAGE_URI "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE_URI' ${{ env.ECS_TASKDEF_PATH }} > taskdef.rendered.json

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: taskdef.rendered.json
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true
