// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  username      String?        
  email         String       @unique
  password      String?
  weight        Float?
  height        Float?
  age           Int?
  gender        String?
  activityLevel String?
  profile_completed Boolean   @default(false)
  preferences   Preferences?

  dietaryGoals  Goal[]
  mealLogs      MealLog[]
  conversations    Conversation[]
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  refreshToken  String?
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  type        GoalType
  description String? // Optional user-defined note
  startDate   DateTime  @default(now())
  endDate     DateTime? // Optional if ongoing
  isActive    Boolean   @default(true)

  protein   Int?
  carbs     Int?
  fats      Int?
  calories  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GoalType {
  MUSCLE_GAIN
  FAT_LOSS
  MAINTENANCE
  RECOMP
  GENERAL_HEALTH
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  PRE_WORKOUT
  POST_WORKOUT
}

model MealLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  mealType   MealType
  customName String? // Optional meal name if user wants to customize

  calories Float
  protein  Float
  carbs    Float
  fats     Float

  servings Float @default(1.0)
  notes      String?

  mealDate DateTime
  user     User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum DietType {
  OMNIVORE
  VEGETARIAN
  VEGAN
  KETO
  PALEO
  GLUTEN_FREE
  OTHER
}

model Preferences {
  id     Int @id @default(autoincrement())
  userId Int @unique
  user      User     @relation(fields: [userId], references: [id])


  mealFrequency Int      @default(3) // meals per day
  snackIncluded Boolean  @default(true)
  dietType      DietType @default(OMNIVORE)
  allergies     String? // optional JSON or CSV string for now

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Conversation {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])

  title     String?   // Optional conversation title
  messages  Message[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  senderRole     SenderRole
  content        String
  metadata       Json?        // for future (token usage, AI model used, etc.)

  createdAt      DateTime @default(now())

  @@index([conversationId])
}
enum SenderRole {
  USER
  AI
  SYSTEM
}
